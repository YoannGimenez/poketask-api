// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  COMPLETED
  TRUE_COMPLETED
  DELETED
  EXPIRED
}

enum TaskType {
  DAILY
  WEEKLY
  ONE_TIME
  REPEATABLE
}

enum TaskDifficulty {
  EASY
  NORMAL
  HARD
}

enum UserStatus {
  PENDING_CONFIRMATION
  USER
  ADMINISTRATOR
  BANNED
}

enum ItemType {
  POKEBALL
  EVOLUTION
  QUEST
  KEY
}

enum Region {
  KANTO
  JOHTO
  HOENN
  SINNOH
  UNOVA
  KALOS
  ALOLA
  GALAR
  PALDEA
  EVENT
}

enum PokemonType {
  NORMAL
  FIRE
  WATER
  ELECTRIC
  GRASS
  ICE
  FIGHTING
  POISON
  GROUND
  FLYING
  PSYCHIC
  BUG
  ROCK
  GHOST
  DARK
  DRAGON
  STEEL
  FAIRY
}

enum LocationType {
  CITY
  ROUTE
  CAVE
  FOREST
  MOUNTAIN
  BEACH
  ISLAND
  SPECIAL
}

model User {
  id                  String     @id @default(uuid())
  username            String     @unique
  email               String     @unique
  password            String
  createdAt           DateTime   @default(now())
  modifiedAt          DateTime   @updatedAt
  status              UserStatus @default(USER)
  lastLogin           DateTime?
  level               Int        @default(1)
  experience          Int        @default(0)
  money               Int        @default(0)
  nextLevelExperience Int        @default(100)
  timezone            String     @default("UTC")

  tasks      Task[]
  items      UserItem[]
  currencies UserCurrency[]
  pokemons   UserPokemon[]
  locations  UserLocation[]
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String
  status      TaskStatus     @default(PENDING)
  type        TaskType       @default(DAILY)
  difficulty  TaskDifficulty @default(NORMAL)
  createdAt   DateTime       @default(now())
  modifiedAt  DateTime       @updatedAt
  dateStart   DateTime?
  dateEnd     DateTime?
  timezone    String         @default("UTC")

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Item {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  type             ItemType
  description      String
  spriteUrl        String
  evolvesPokemon   String[]
  buyPrice         Int
  sellPrice        Int
  levelUnlock      Int
  catchChanceBonus Float    @default(0)

  userItems UserItem[]

  EncounterItem EncounterItem[]
}

model Currency {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  userCurrencies UserCurrency[]
}

model Pokemon {
  id             Int           @id @default(autoincrement())
  pokedexId      Int           @unique
  name           String        @unique
  types          PokemonType[]
  spriteUrl      String
  shinySpriteUrl String?
  evolvesInto    String[]
  evolvesFrom    String?
  levelEvolve    Int?
  catchChance    Int

  userPokemons UserPokemon[]

  encounters EncounterPokemon[]
}

model Location {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  region   Region
  moneyMin Int
  moneyMax Int
  type     LocationType @default(ROUTE)

  encounterPokemon EncounterPokemon[]
  encounterItem    EncounterItem[]
  userLocations    UserLocation[]
}

model EncounterPokemon {
  id              Int   @id @default(autoincrement())
  encounterChance Float

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model EncounterItem {
  id              Int   @id @default(autoincrement())
  encounterChance Float

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  item   Item @relation(fields: [itemId], references: [id])
  itemId Int
}

model UserLocation {
  id              Int     @id @default(autoincrement())
  unlocked        Boolean @default(false)
  completed       Boolean @default(false)
  completedAmount Int     @default(0)

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  @@unique([userId, locationId])
}

model UserItem {
  id       Int     @id @default(autoincrement())
  quantity Int     @default(0)
  unlocked Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId Int

  @@unique([userId, itemId])
}

model UserCurrency {
  id       Int @id @default(autoincrement())
  quantity Int @default(0)

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  @@unique([userId, currencyId])
}

model UserPokemon {
  id           Int     @id @default(autoincrement())
  amountCaught Int     @default(0)
  shiny        Boolean @default(false)

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int

  @@unique([userId, pokemonId])
}
